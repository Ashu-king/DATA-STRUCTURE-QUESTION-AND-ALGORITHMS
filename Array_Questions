question 1)

// finding the largest and the second largest
int largest=arr[0];
    int Sec_largest = arr[0];
    
    int temp= 0;
    
    for(int i = 0; i<8; i++){
         
        if(largest < arr[i+1]){
            temp= largest;
            largest= arr[i+1];
        }
        if(Sec_largest!=largest){
            Sec_largest= temp;
        }
      
        
    }
     cout<<largest<<"\n";
     cout<<Sec_largest<<"\n";
   
question 2)

//        finding if array is sorted or not

 int arr[8] = {1,2,3,4,8,5,6,7};
    
    int temp = 0;
    int largest= arr[0];
    for(int i = 0; i<8; i++){
     if(largest<=arr[i+1]){
         largest = arr[i+1];
         temp=0;
     }else{
         temp=1;
         break;
     }
     
    }
    if(temp==1) cout<<"not sorted";
    else cout<<"sorted";

//   question 3 ) : removing duplicates from both sorted and unsorted array

          int arr[8] = {1,2,3,3,4,5,5,6};
    // finding max number
    for(int i=0;i<8; i++){
        for(int j=i+1; j<=8; j++){
          if(arr[i]==arr[j]) 
                arr[j] = 0;
        }
        
    }
    
    for(int i =0; i<8; i++){
        cout<<arr[i]<<" ";
    }

// Question 4 ): rotating array by K places


void Reverse(int arr[], int start, int end)
{
  while (start <= end)
  {
    int temp = arr[start];
    arr[start] = arr[end];
    arr[end] = temp;
    start++;
    end--;
  }
}
void Rotateeletoleft(int arr[], int n, int k)
{
  // Reverse first k elements
  Reverse(arr, 0, k - 1);
  // Reverse last n-k elements
  Reverse(arr, k, n - 1);
  // Reverse whole array
  Reverse(arr, 0, n - 1);
}
int main() {
    // second largest and second smallest number
    int arr[8] = {1,2,3,3,4,5,5,6};
      int n = 8;
  int k = 7;
  Rotateeletoleft(arr, n, k);
 cout << "After Rotating the k elements to left ";
  for (int i = 0; i < n; i++)
    cout << arr[i] << " ";
  cout << endl;

// Question 5) move zeros to the last;


              j     i
  int temp;
  int j = -1;
  for(int i = 0; i<6; i++){
      if(arr[i]==0){
          j=i;
          break;
      }
      
  }
  for(int i = j + 1; i<6; i++){
      int temp;
      if(arr[i]!=0){
          temp= arr[i];
          arr[i]=arr[j];
          arr[j ]= temp;
          j++;
      }
  }

//question 6) union b/w two sorted arrays


 int a1[6]={1,2,3,4,5,6};
 int a2[6]={2,3,7,8,9,10};
 int i=0;
 int j = 0;
 int k = 0;
 vector<int>temp;
 while(i<6&&j<6){
     
     if(a1[i]<=a2[j]){
         if(temp.size()==0||temp.back()!=a1[i]){
             temp.push_back(a1[i]);
         }
         i++;
     }else{
         
         if(temp.size()==0||temp.back()!=a2[j]){
             temp.push_back(a2[j]);
         }
         j++;
     }
 }
 while(i<6&&j==6){
       if(temp.size()==0||temp.back()!=a1[i]){
             temp.push_back(a1[i]);
         }
         i++;
 }
  while(j<6&&i==6){
       if(temp.size()==0||temp.back()!=a2[j]){
             temp.push_back(a2[j]);
         }
         i++;
 }
 
 for (auto i = temp.begin(); i != temp.end(); ++i) 
        cout << *i << " "; 

//Question 7) find the missing number from 1 to n;

    int n = 6;
    int arr1[n] = {1,2,3,4,5};
   int sum1= n*(n+1)/2;
   int sum2=0;
   
   
    for (int i = 0; i < 6; i++) {
      sum2= sum2+arr1[i];
        
    }

 int result = sum1 - sum2;
 
 cout<<sum1-sum2;

//Question 8) Find the number that appears once, and the other numbers twice

#include <bits/stdc++.h>
using namespace std;

int getSingleElement(vector<int> &arr) {
    //size of the array:
    int n = arr.size();

    // XOR all the elements:
    int xorr = 0;
    for (int i = 0; i < n; i++) {
        xorr = xorr ^ arr[i];
    }
    return xorr;
}

int main()
{
    vector<int> arr = {1, 2, 1};
    int ans = getSingleElement(arr);
    cout << "The single element is: " << ans << endl;
    return 0;
}
  

    
